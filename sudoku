#Sudoku game
board = [
    [7, 8, 0, 4, 0, 0, 1, 2, 0],
    [6, 0, 0, 0, 7, 5, 0, 0, 9],
    [0, 0, 0, 6, 0, 1, 0, 7, 8],
    [0, 0, 7, 0, 4, 0, 2, 6, 0],
    [0, 0, 1, 0, 5, 0, 9, 3, 0],
    [9, 0, 4, 0, 6, 0, 0, 0, 5],
    [0, 7, 0, 3, 0, 0, 0, 1, 2],
    [1, 2, 0, 0, 0, 7, 4, 0, 0],
    [0, 4, 9, 2, 0, 6, 0, 0, 7]
    ]





def valid(bo, num, pos):
    """
    This function checks that the same number is not in the same column, row, or square. 
    :param bo: 2d list
    :param num: int
    :param pos: coordinates (row, col)
    :return: True if all conditions are met
    """
    #checks that the same num is not in the same row
    for i in range(len(bo[0])):
        if bo[pos[0]][i] == num and pos[1] != i:   #(pos[0] != i) checks the numbers input as well
            return False
    #checks the same num is not in the same column
    for i in range(len(bo)):
        if bo[i][pos[1]] == num and pos[0] != i:
            return False
    #checks the 3x3 square for the same number
    box_x = pos[1] // 3
    box_y = pos[0] // 3
    for i in range(box_y * 3, box_y * 3 + 3):
        for j in range(box_x * 3, box_x * 3 + 3):
            if bo[i][j] == num and (i,j) != pos:
                return False
    return True




def print_board(bo):
    """
    This function prints the board in the correct format
    :param bo: 2d list
    :return: the 2d list in the form of rows and columns 
    """
    for i in range(len(bo)):
        if i % 3 == 0 and i != 0:
            print("- - - - - - - - - - - - ") #seperates every three rows

        for j in range(len(bo[0])):
            if j % 3 == 0 and j != 0: #seperates the colomns
                print(" | ", end="")
            if j == 8:
                print(bo[i][j])
            else:
                print(str(bo[i][j]) + " ", end="")


def find_empty(bo):
    """
    Finds the empty spaces in the board. aka the 0.
    :param bo: 2d list
    :return: the coordinates(row,col) of the empty,0 spaces in the board.
    """
    for i in range(len(bo)):
        for j in range(len(bo[0])):
            if bo[i][j] == 0:
                return (i, j) #row , col
    return None


def solve(bo):
  """
  This function uses recursions and backtracking to fill in accurate values into the sudoku board. 
  :param bo: 2d list
  :return: the sudoku board with all values filled out without any repition of numbers in the same column or row or square. 
  """
    find = find_empty(bo)
    if find:
        row, col = find
    else:
        return True


    for i in range(1, 10):
        if valid(bo, i, (row, col)):
            bo[row][col] = i
            if solve(bo):
                return True

            bo[row][col] = 0
    return False

print(print_board(board))
solve(board)
print(print_board(board))
